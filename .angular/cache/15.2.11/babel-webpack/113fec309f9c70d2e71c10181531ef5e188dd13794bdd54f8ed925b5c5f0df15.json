{"ast":null,"code":"import { Node } from 'src/shared/models/node';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction AutomataComponent_tr_34_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 5)(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function AutomataComponent_tr_34_Template_button_click_9_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const node_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.deleteNode(node_r1.id));\n    });\n    i0.ɵɵtext(10, \" delete node X \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const node_r1 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"id\", node_r1.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(node_r1.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(node_r1.rel0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(node_r1.rel1);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(node_r1.isAccept);\n  }\n}\nexport let AutomataComponent = /*#__PURE__*/(() => {\n  class AutomataComponent {\n    constructor() {\n      this.inputId = \"\";\n      this.inputRel0 = \"\";\n      this.inputRel1 = \"\";\n      this.inputAccept = false;\n      this.word = \"11011\";\n      this.nodes = [new Node('q0', ['q0', 'q1'], ['q0', 'q2'], false), new Node('q1', ['q3'], [], false), new Node('q2', [], ['q3'], false), new Node('q3', [], [], true)];\n      this.acceptNodes = [this.nodes[3]];\n      this.isWordAccepted = \"\";\n    }\n    addNode(id, rel0, rel1, accept) {\n      let newnode = new Node(id, rel0.split(','), rel1.split(','), accept);\n      this.nodes.push(newnode);\n      if (accept) {\n        this.acceptNodes.push(newnode);\n      }\n    }\n    deleteNode(id) {\n      const index = this.nodes.findIndex(n => n.id == id);\n      if (index > -1) {\n        this.nodes.splice(index, 1);\n        this.acceptNodes.splice(index, 1);\n      }\n    }\n    automata(node, word) {\n      if (word == \"\") {\n        if (this.acceptNodes.includes(node)) {\n          console.log(\"working\");\n          return 1;\n        } else {\n          console.log(\"working\");\n          return 0;\n        }\n      }\n      if (node.rel0.length > 0 && word[0] == \"0\") {\n        for (let index in node.rel0) {\n          let next = this.nodes.find(n => n.id == node.rel0[index]);\n          let nextword = word.slice(1);\n          if (next != undefined) {\n            if (this.automata(next, nextword)) {\n              return 1;\n            }\n          }\n        }\n      }\n      if (node.rel1.length > 0 && word[0] == \"1\") {\n        for (let index in node.rel1) {\n          let next = this.nodes.find(n => n.id == node.rel1[index]);\n          let nextword = word.slice(1);\n          if (next != undefined) {\n            if (this.automata(next, nextword)) {\n              return 1;\n            }\n          }\n        }\n      }\n      return 0;\n    }\n    runAutomata() {\n      let result = this.automata(this.nodes[0], this.word);\n      if (result) {\n        this.isWordAccepted = \"ACCEPT\";\n      } else {\n        this.isWordAccepted = \"REJECT\";\n      }\n    }\n    static #_ = this.ɵfac = function AutomataComponent_Factory(t) {\n      return new (t || AutomataComponent)();\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AutomataComponent,\n      selectors: [[\"app-automata\"]],\n      decls: 43,\n      vars: 7,\n      consts: [[1, \"container\"], [\"type\", \"text\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"checkbox\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [3, \"id\", 4, \"ngFor\", \"ngForOf\"], [3, \"id\"]],\n      template: function AutomataComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\")(2, \"tr\")(3, \"td\");\n          i0.ɵɵtext(4, \"ID: \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"td\")(6, \"input\", 1);\n          i0.ɵɵlistener(\"ngModelChange\", function AutomataComponent_Template_input_ngModelChange_6_listener($event) {\n            return ctx.inputId = $event;\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(7, \"tr\")(8, \"td\");\n          i0.ɵɵtext(9, \"RELACIONES 0 \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"td\")(11, \"input\", 1);\n          i0.ɵɵlistener(\"ngModelChange\", function AutomataComponent_Template_input_ngModelChange_11_listener($event) {\n            return ctx.inputRel0 = $event;\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(12, \"tr\")(13, \"td\");\n          i0.ɵɵtext(14, \"RELACIONES 1 \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"td\")(16, \"input\", 1);\n          i0.ɵɵlistener(\"ngModelChange\", function AutomataComponent_Template_input_ngModelChange_16_listener($event) {\n            return ctx.inputRel1 = $event;\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(17, \"tr\")(18, \"td\");\n          i0.ɵɵtext(19, \" ES ACEPTACION \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"td\")(21, \"input\", 2);\n          i0.ɵɵlistener(\"ngModelChange\", function AutomataComponent_Template_input_ngModelChange_21_listener($event) {\n            return ctx.inputAccept = $event;\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelement(22, \"tr\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function AutomataComponent_Template_button_click_23_listener() {\n            return ctx.addNode(ctx.inputId, ctx.inputRel0, ctx.inputRel1, ctx.inputAccept);\n          });\n          i0.ɵɵtext(24, \"Generar Nodo\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(25, \"table\")(26, \"th\");\n          i0.ɵɵtext(27, \"Nodo \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"th\");\n          i0.ɵɵtext(29, \"Relaciones 0\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(30, \"th\");\n          i0.ɵɵtext(31, \"Relaciones 1\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(32, \"th\");\n          i0.ɵɵtext(33, \"Aceptacion\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(34, AutomataComponent_tr_34_Template, 11, 5, \"tr\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(35, \" Palabra de prueba: \");\n          i0.ɵɵelementStart(36, \"input\", 1);\n          i0.ɵɵlistener(\"ngModelChange\", function AutomataComponent_Template_input_ngModelChange_36_listener($event) {\n            return ctx.word = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(37, \"br\");\n          i0.ɵɵelementStart(38, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function AutomataComponent_Template_button_click_38_listener() {\n            return ctx.runAutomata();\n          });\n          i0.ɵɵtext(39, \" Correr Automata \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(40, \"br\");\n          i0.ɵɵelementStart(41, \"p\");\n          i0.ɵɵtext(42);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngModel\", ctx.inputId);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngModel\", ctx.inputRel0);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngModel\", ctx.inputRel1);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngModel\", ctx.inputAccept);\n          i0.ɵɵadvance(13);\n          i0.ɵɵproperty(\"ngForOf\", ctx.nodes);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngModel\", ctx.word);\n          i0.ɵɵadvance(6);\n          i0.ɵɵtextInterpolate(ctx.isWordAccepted);\n        }\n      },\n      dependencies: [i1.NgForOf, i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.NgModel],\n      styles: [\"*[_ngcontent-%COMP%]{margin:0;padding:0}button[_ngcontent-%COMP%]{color:#fff}input[_ngcontent-%COMP%]{background:white}.container[_ngcontent-%COMP%]{background:#110b0d;color:#fff;width:100vw}th[_ngcontent-%COMP%], td[_ngcontent-%COMP%]{padding:0 10px 0 0}\"]\n    });\n  }\n  return AutomataComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}