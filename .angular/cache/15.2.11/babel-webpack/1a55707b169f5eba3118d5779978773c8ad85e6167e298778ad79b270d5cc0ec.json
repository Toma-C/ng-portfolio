{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../grid-row/grid-row.component\";\nconst _c0 = [\"table\"];\nfunction BackgroundComponent_app_grid_row_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-grid-row\", 4, 5);\n  }\n  if (rf & 2) {\n    const r_r3 = ctx.index;\n    i0.ɵɵpropertyInterpolate(\"id\", r_r3);\n  }\n}\nconst _c1 = function () {\n  return [];\n};\nfunction getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\nfunction min(x, y) {\n  return x <= y ? x : y;\n}\nfunction max(x, y) {\n  return x >= y ? x : y;\n}\nlet ChildDirective = /*#__PURE__*/(() => {\n  class ChildDirective {\n    static #_ = this.ɵfac = function ChildDirective_Factory(t) {\n      return new (t || ChildDirective)();\n    };\n    static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: ChildDirective,\n      selectors: [[\"child-directive\"]]\n    });\n  }\n  return ChildDirective;\n})();\nexport let BackgroundComponent = /*#__PURE__*/(() => {\n  class BackgroundComponent {\n    ngAfterViewInit() {\n      let board = [];\n      let board_next = [];\n      let Table = this.input.nativeElement;\n      let indexr = 0;\n      let indexc = 0;\n      // populate randomly\n      for (const row of Table.children) {\n        board.push([]);\n        board_next.push([]);\n        indexc = 0;\n        for (const cell of row.children) {\n          let activity = getRandomInt(3) == 1 ? 1 : 0;\n          board[indexr].push(activity);\n          board_next[indexr].push(0);\n          cell.children[0].classList.toggle('active', board[indexr][indexc]);\n          indexc++;\n        }\n        indexr++;\n      }\n      setInterval(() => {\n        for (let r = 0; r < 5; r++) {\n          for (let c = 0; c < 20; c++) {\n            let neighborcount = 0;\n            //  console.log('2INDEDX', r, c, 'VAL:', board[r][c]);\n            if (r - 1 >= 0) {\n              if (c - 1 >= 0) {\n                neighborcount += board[r - 1][c - 1];\n              }\n              neighborcount += board[r - 1][c];\n              if (c + 1 <= 19) {\n                neighborcount += board[r - 1][c + 1];\n              }\n            }\n            if (c - 1 >= 0) {\n              neighborcount += board[r][c - 1];\n            }\n            if (c + 1 <= 19) {\n              neighborcount += board[r][c + 1];\n            }\n            if (r + 1 < 4) {\n              if (c - 1 >= 0) {\n                neighborcount += board[r + 1][c - 1];\n              }\n              neighborcount += board[r + 1][c];\n              if (c + 1 <= 19) {\n                neighborcount += board[r + 1][c + 1];\n              }\n            }\n            //  console.log(\n            //    'row:',\n            //    r,\n            //    'col:',\n            //    c,\n            //    board[r][c],\n            //    'neigh',\n            //    neighborcount\n            //  );\n            if (board[r][c]) {\n              if (neighborcount < 2) {\n                board_next[r][c] = 0;\n              } else if (neighborcount > 3) {\n                board_next[r][c] = 0;\n              } else {\n                board_next[r][c] = 1;\n              }\n            } else {\n              if (neighborcount == 3) {\n                board_next[r][c] = 1;\n              } else {\n                board_next[r][c] = 0;\n              }\n            }\n          }\n        }\n        for (let i = 0; i < 5; i++) {\n          for (let j = 0; j < 20; j++) {\n            board[i][j] = board_next[i][j];\n            board_next[i][j] = 0;\n          }\n        }\n        let indr = 0;\n        let indc = 0;\n        //update classes\n        for (const row of Table.children) {\n          indc = 0;\n          for (const cell of row.children) {\n            let act = board[indr][indc];\n            cell.children[0].classList.toggle('active', act);\n            indc++;\n          }\n          indr++;\n        }\n      }, 1000);\n      setInterval(() => {\n        for (let i = 0; i < 5; i++) {\n          for (let j = 0; j < 20; j++) {\n            board[i][j] = getRandomInt(3) == 1 ? 1 : 0;\n          }\n        }\n      }, 10000);\n    }\n    static #_ = this.ɵfac = function BackgroundComponent_Factory(t) {\n      return new (t || BackgroundComponent)();\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: BackgroundComponent,\n      selectors: [[\"app-background\"]],\n      viewQuery: function BackgroundComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.input = _t.first);\n        }\n      },\n      decls: 6,\n      vars: 2,\n      consts: [[1, \"my_container\"], [1, \"my_grid-table\"], [\"table\", \"\"], [3, \"id\", 4, \"ngFor\", \"ngForOf\"], [3, \"id\"], [\"row\", \"\"]],\n      template: function BackgroundComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1, 2);\n          i0.ɵɵtemplate(3, BackgroundComponent_app_grid_row_3_Template, 2, 1, \"app-grid-row\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"span\");\n          i0.ɵɵtext(5, \"Tom\\u00E1s Cravero\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpureFunction0(1, _c1).constructor(5));\n        }\n      },\n      dependencies: [i1.NgForOf, i2.GridRowComponent],\n      styles: [\"*[_ngcontent-%COMP%]{width:100%;height:100%;display:block;margin:0;padding:0;position:relative}.my_grid-table[_ngcontent-%COMP%]{position:relative;height:5%;display:block;vertical-align:bottom;border-collapse:collapse;font-size:0}.my_container[_ngcontent-%COMP%]{display:flex;flex-direction:row;position:relative;text-align:center}span[_ngcontent-%COMP%]{height:11vw;font-size:11vw;line-height:1;position:absolute;top:50%;transform:translateY(-50%);color:#fff;font-family:Data70;font-style:bold;background:none;text-shadow:-2px -2px 0 #000,2px -2px 0 #000,-2px 2px 0 #000,2px 2px 0 #000}\"]\n    });\n  }\n  return BackgroundComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}