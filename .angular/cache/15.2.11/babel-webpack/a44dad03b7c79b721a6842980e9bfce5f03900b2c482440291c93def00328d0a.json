{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./automata/automata.component\";\nexport let LenguajesformalesComponent = /*#__PURE__*/(() => {\n  class LenguajesformalesComponent {\n    static #_ = this.ɵfac = function LenguajesformalesComponent_Factory(t) {\n      return new (t || LenguajesformalesComponent)();\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LenguajesformalesComponent,\n      selectors: [[\"app-lenguajesformales\"]],\n      decls: 18,\n      vars: 0,\n      consts: [[1, \"pagebody\"], [1, \"container\"], [\"src\", \"https://media.geeksforgeeks.org/wp-content/uploads/00nfa.png\"], [\"routerLink\", \"/\"]],\n      template: function LenguajesformalesComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\");\n          i0.ɵɵtext(3, \" Automatas de estado finito No Deterministas (NFA)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"p\");\n          i0.ɵɵtext(5, \" Un aut\\u00F3mata finito (AF) (NFA en Ingles) o m\\u00E1quina de estado finito es un modelo computacional que realiza c\\u00F3mputos en forma autom\\u00E1tica sobre una entrada para producir una salida. Este modelo est\\u00E1 conformado por un alfabeto, un conjunto de estados finito, una funci\\u00F3n de transici\\u00F3n, un estado inicial y un conjunto de estados finales. [src=wikipedia] \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"p\");\n          i0.ɵɵtext(7, \" Puede crear su propio automata y comprobar palabras con este programa. \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"p\");\n          i0.ɵɵtext(9, \" Para simplificar el procedimiento, como es de costumbre en este area de la informatica, reducimos nuestro alfabeto a \\\"0,1\\\" puesto que cualquier lenguaje finito puede ser codificado en binario (y simplifica mucho el programa!) \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"p\");\n          i0.ɵɵtext(11, \" Este ejemplo de automata, que es el que se encuentra por defecto en la tabla, acepta todas las palabras terminadas en 00 o 11. \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(12, \"img\", 2)(13, \"app-automata\");\n          i0.ɵɵtext(14, \" El primer nodo en ser agregado ser\\u00E1 el comienzo del programa. \");\n          i0.ɵɵelementStart(15, \"nav\")(16, \"a\", 3);\n          i0.ɵɵtext(17, \"return\");\n          i0.ɵɵelementEnd()()()();\n        }\n      },\n      dependencies: [i1.RouterLink, i2.AutomataComponent],\n      styles: [\".container[_ngcontent-%COMP%]{margin:0;padding:0;background:#110b0d;font-family:Xolonium;align-items:center;width:100vw}.pagebody[_ngcontent-%COMP%]{align-items:center;display:flex;text-justify:distribute;justify-content:center;flex-direction:column;background:#110b0d}input[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{width:10%}img[_ngcontent-%COMP%]{opacity:70%;width:30%;margin-bottom:1%}\"]\n    });\n  }\n  return LenguajesformalesComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}